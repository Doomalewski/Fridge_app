@model IEnumerable<Fridge_app.Models.Product>
@{
    ViewData["Title"] = "Lista Produktów";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>@ViewData["Title"]</h1>
        <div>
            <a asp-action="Create" class="btn btn-primary me-2">Dodaj Nowy</a>
            <a asp-action="Upload" class="btn btn-secondary">Importuj CSV</a>
        </div>
    </div>

    <div class="mb-3">
        <ul class="nav nav-tabs" id="categoryTabs">
            <li class="nav-item">
                <a class="nav-link active" data-category="all" href="#">Wszystkie</a>
            </li>
            @foreach (var category in Enum.GetValues(typeof(Fridge_app.Models.ProductCategory)))
            {
                <li class="nav-item">
                    <a class="nav-link" data-category="@category" href="#">@category</a>
                </li>
            }
        </ul>
    </div>

    <div class="input-group mb-3">
        <span class="input-group-text">Szukaj</span>
        <input type="text" id="searchInput" class="form-control" placeholder="Wpisz nazwę produktu...">
    </div>


    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>@Html.DisplayNameFor(model => model.Name)</th>
                    <th>@Html.DisplayNameFor(model => model.Kcal)</th>
                    <th>Tłuszcze</th>
                    <th>Węglowodany</th>
                    <th>Białko</th>
                    <th>@Html.DisplayNameFor(model => model.Unit)</th>
                    <th>Kategoria</th>
                    <th>Zakres Cen</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.Name)</td>
                        <td>@Html.DisplayFor(modelItem => item.Kcal)</td>
                        <td>@item.Fat.ToString("N1")g</td>
                        <td>@item.Carbohydrates.ToString("N1")g</td>
                        <td>@item.Protein.ToString("N1")g</td>
                        <td>@Html.DisplayFor(modelItem => item.Unit)</td>
                        <td>@Html.DisplayFor(modelItem => item.ProductCategory)</td>
                        <td>
                            @if (item.PriceMin > 0 || item.PriceMax > 0)
                            {
                                <text>@item.PriceMin.ToString("C") - @item.PriceMax.ToString("C")</text>
                            }
                            else
                            {
                                <span class="text-muted">brak danych</span>
                            }
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-warning">Edytuj</a>
                                <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info">Szczegóły</a>
                                <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">Usuń</a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mt-4">
        <p class="text-muted">Liczba produktów: @Model.Count()</p>
    </div>
</div>

<style>
    .table th {
        background-color: #212529;
        color: white;
    }

    .btn-group .btn {
        margin: 2px;
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }

    .nav-tabs .nav-link {
        color: #0d6efd;
        cursor: pointer;
        font-weight: 500;
    }

        .nav-tabs .nav-link.active {
            background-color: #0d6efd;
            color: white;
            border-radius: 0.5rem 0.5rem 0 0;
        }

    .input-group-text {
        background-color: #0d6efd;
        color: white;
        border: none;
    }

</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById("searchInput");
        const categoryTabs = document.querySelectorAll("#categoryTabs .nav-link");
        const rows = document.querySelectorAll("tbody tr");

        let activeCategory = "all";

        // Filtrowanie po kategorii
        categoryTabs.forEach(tab => {
            tab.addEventListener("click", function (e) {
                e.preventDefault();
                categoryTabs.forEach(t => t.classList.remove("active"));
                this.classList.add("active");
                activeCategory = this.getAttribute("data-category").toLowerCase();
                filterRows();
            });
        });

        // Wyszukiwanie po nazwie
        searchInput.addEventListener("keyup", filterRows);

        function filterRows() {
            const searchText = searchInput.value.toLowerCase();

            rows.forEach(row => {
                const name = row.querySelector("td:first-child").textContent.toLowerCase();
                const category = row.querySelector("td:nth-child(7)").textContent.toLowerCase();

                const matchesCategory = (activeCategory === "all" || category.includes(activeCategory));
                const matchesSearch = name.includes(searchText);

                if (matchesCategory && matchesSearch) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
        }
    });
</script>
